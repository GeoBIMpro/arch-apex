// SCENARIO PARAMETERS //

// Reference Trajectory
#define s 33.831636
#define kappa_0 0.000000
#define kappa_1 0.006046
#define kappa_2 (-0.000322)
#define kappa_3 0.000000

// Cubic spline inputs
#define a kappa_0
#define b (-0.50)*(-2*kappa_3 + 11*kappa_0 - 18*kappa_1 + 9*kappa_2)/s
#define c (4.50)*(-kappa_3 + 2*kappa_0 - 5*kappa_1 +4*kappa_2)/(s*s)
#define e (-4.50)*(-kappa_3 + kappa_0 - 3*kappa_1 + 3*kappa_2)/(s*s*s)

// Mathematical constants...
#define pi 3.14159265359

// Width of road
#define w 3.7

// Desired velocity of ego vehicle
#define v_d 11.11 // Approximately 25 mph

// VEHICLE PARAMETERS //
// Constants
#define m  2273.0
#define Iz 4423.0
#define Cf 108000.0
#define Cr 108000.0
#define lf 1.292
#define lr 1.515

// CONTROLLER PARAMETERS//
#define k1 2.0
#define k2 12.0
#define k3 4.0
#define k4 2.0
#define k5 1.0
#define k6 10.0
#define kd 0.28

// Helpers to clean up equations...
#define cl Cr*lr-Cf*lf

// TRACKING CONTROLLER INPUTS //
#define ax  k6*(v_d-v)

// PURE PURSUIT ALGORITHM //
#define l sqrt((waypointx - sx_0)*(waypointx - sx_0) + (waypointy - sy_0)*(waypointy - sy_0))
#define ydiff (waypointy-sy_0)
#define xdiff (waypointx-sx_0)
#define slope atan2(ydiff , xdiff)
#define angdiff (abs(Psi_init - slope) - pi)
#define alpha (pi - abs(angdiff))
#define delta (2*sin(alpha)/l)
#define lookahead_time 0.1



// BOUNDS ON VARIABLES //
[0,4] time;
[0,4] tau;
[0,10] simtime;
[0,2] schedtime;

[-20,20] Beta;
[-20,20.04] Psi;
[-20,20.05] Psi_dot;
[6,12] v;
[-1,100] sx;
[-20,20] sy;

[-2,2.06] kappa_d_spline;
[-2,2.07] Psi_d_spline;
[-1,100] sx_d_spline;
[-20,20] sy_d_spline;
[-2,2.08] Psi_dot_d_spline;

[0,10] lookahead;
[0,35] waypointx;
[-10,10] waypointy;
[0,100] sx_0; 
[-20,20] sy_0; 
[-5,5] Psi_init;

// HYBRID AUTOMATON//

// MODE 1, follow reference trajectory # 1
{
    mode 1;

    invt:
    (schedtime<=0.1);

    flow:

    /* Time */
    d/dt[tau]= 1;
    d/dt[schedtime]= 1;
    d/dt[simtime]= 0;


    /*Ego-Vehicle*/
    d/dt[Beta]= ((cl/(m*v*v)) - 1.0)*Psi_dot + Cf*delta/(m*v) - (Cf+Cr)*Beta/(m*v);  
    d/dt[Psi]= Psi_dot;
    d/dt[Psi_dot]= (cl*Beta/Iz) - ((lf*lf*Cf+lr*lr*Cr)/Iz)*(Psi_dot/v) + (lf*Cf)*delta/Iz ;
    d/dt[v]= ax; 
    d/dt[sx]= v*cos(Beta+Psi); 
    d/dt[sy]= v*sin(Beta+Psi); 


    /*Trajectory and Tracking Equations*/
    d/dt[kappa_d_spline] = 0;
    d/dt[Psi_d_spline] = 0;
    d/dt[sx_d_spline] = 0;
    d/dt[sy_d_spline] = 0;
    d/dt[Psi_dot_d_spline] = 0;

    /* Constants */
    d/dt[lookahead]= 0;
    d/dt[waypointx]= 0;
    d/dt[waypointy]= 0;
    d/dt[sx_0] = 0;
    d/dt[sy_0] = 0; 
    d/dt[Psi_init] = 0; 

    jump:
        (and (schedtime >= 0.1)) ==> @2
            (and 
             (tau' = tau)
             (simtime' = simtime)
             (schedtime'= 0)

             (Beta' = Beta)
             (Psi' = Psi)
             (Psi_dot' = Psi_dot)
             (v' = v)
             (sx' = sx)
             (sy' = sy)

             (kappa_d_spline' = kappa_d_spline)
             (Psi_d_spline' = Psi_d_spline)
             (sx_d_spline' = sx_d_spline)
             (sy_d_spline' = sy_d_spline)
             (Psi_dot_d_spline' = Psi_dot_d_spline)

             (lookahead' = tau+0.2)
             (waypointx' = waypointx) 
             (waypointy' = waypointy) 
             (sx_0' = sx_0)
             (sy_0' = sy_0)
             (Psi_init' = Psi_init));

            // ' End the syntax highlight madness!
}

// MODE 2, compute the next waypoint, ego vehicle state does not evolve here
{
    mode 2;

    invt:
    (simtime <= lookahead);

    flow:

    /* Time */
    d/dt[tau]= 0;
    d/dt[schedtime]= 0;
    d/dt[simtime]= 1;
    
    /*Ego-Vehicle*/
    d/dt[Beta]= 0;
    d/dt[Psi]= 0;
    d/dt[Psi_dot]= 0;
    d/dt[v]= 0; 
    d/dt[sx]= 0; 
    d/dt[sy]= 0; 

    /*Forward Simulation to find next waypoint*/
    d/dt[kappa_d_spline]= b*v_d + 2*c*v_d*v_d*simtime + 3*e*v_d*v_d*v_d*simtime*simtime ;
    d/dt[Psi_d_spline]= v_d*kappa_d_spline;
    d/dt[sx_d_spline]= v_d*cos(Psi_d_spline);
    d/dt[sy_d_spline] = v_d*sin(Psi_d_spline);
    d/dt[Psi_dot_d_spline]= v_d*(b*v_d + 2*c*v_d*v_d*simtime + 3*e*v_d*v_d*v_d*simtime*simtime);

    /* Constants which only get updated on jumps*/
    d/dt[lookahead]= 0;
    d/dt[waypointx]= 0;
    d/dt[waypointy]= 0;
    d/dt[sx_0] = 0;
    d/dt[sy_0] = 0; 
    d/dt[Psi_init] = 0;

    jump:
    (and (simtime >= lookahead)) ==> @1
        (and 
             (tau' = tau)
             (simtime' = 0)
             (schedtime'= schedtime)

             (Beta' = Beta)
             (Psi' = Psi)
             (Psi_dot' = Psi_dot)
             (v' = v)
             (sx' = sx)
             (sy' = sy)

             (kappa_d_spline' = 0)
             (Psi_d_spline' = 0)
             (sx_d_spline'= 0)
             (sy_d_spline' = 0)
             (Psi_dot_d_spline' = 0)

             (lookahead' = lookahead)
             (waypointx' = sx_d_spline) 
             (waypointy' = sy_d_spline) 
             (sx_0' = sx)
             (sy_0' = sy)
             (Psi_init'= Psi));

            // ' End the syntax highlight madness!
}


init: 
@2 (and 

    (tau=0) 
    (simtime = 0) 
    (schedtime = 0)

    (Beta=0) 
    (Psi=0) 
    (Psi_dot=0) 
    (v=10.9) 
    (sx=0) 
    (sy=0) 

    (kappa_d_spline= 0)
    (Psi_d_spline =0)
    (sx_d_spline= 0) 
    (sy_d_spline=0)
    (Psi_dot_d_spline=0)
   
    (lookahead= 0.2)
    (waypointx=0.1) 
    (waypointy=0.1) 
    (sx_0=sx)
    (sy_0=sy)
    (Psi_init= Psi));

goal:
@1 (tau>0.1);