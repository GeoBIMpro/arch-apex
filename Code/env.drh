#define s 33.831636
#define kappa_0 0.000000
#define kappa_1 0.006046
#define kappa_2 -0.000322
#define kappa_3 0.000000

// Cubic spline inputs
#define a kappa_0
#define b (-0.50*(-2*kappa_3 + 11*kappa_0 - 18*kappa_1 + 9*kappa_2)/s)
#define c (4.50*(-kappa_3 + 2*kappa_0 - 5*kappa_1 +4*kappa_2)/(s*s))
#define e (-4.50*(-kappa_3 + kappa_0 - 3*kappa_1 + 3*kappa_2)/(s*s*s))

// Width of road
#define w 3.7

// Desired velocity of ego vehicle
#define v_d 11.11 // Approximately 25 mph


// BOUNDS ON VARIABLES //
[0,10] time;
[0,5] simtime;
[-10,10] kappa_env_1;
[-10,10] Psi_env_1;
[-100,100] sx_env_1;
[-100,100] sy_env_1;
[-10,10] Psi_dot_env_1;
[-0.25, 0.25] noise [0.5];

// HYBRID AUTOMATON//

// MODE 1, follow trajectory deviate with random fluctuations in acceleration. 
{   
    mode 1;

    invt:

    flow:
    /*Forward Simulation of Environment Vehicle*/
    d/dt[simtime]= 1;
    d/dt[kappa_env_1]= b*v_d + 2*c*v_d*v_d*simtime + 3*e*v_d*v_d*v_d*simtime*simtime ;
    d/dt[Psi_env_1]= v_d*kappa_env_1;
    d/dt[sx_env_1]= v_d*cos(Psi_env_1) + noise;
    d/dt[sy_env_1] = v_d*sin(Psi_env_1) + noise;
    d/dt[Psi_dot_env_1]= v_d*(b*v_d + 2*c*v_d*v_d*simtime + 3*e*v_d*v_d*v_d*simtime*simtime);
    d/dt[noise] = 0;
    
    jump: 

}

init: 
@1 (and 
    (simtime = 0) 
    (kappa_env_1= 0)
    (Psi_env_1 =0)
    (sx_env_1= 0) 
    (sy_env_1=0)
    (Psi_env_1=0));

goal:
@1 (simtime > 4);
