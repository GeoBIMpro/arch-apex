(set-logic QF_NRA_ODE)
(declare-fun x () Real)
(declare-fun v () Real)
(declare-fun noise () Real [1.000000])
(declare-fun x_0_0 () Real)
(declare-fun x_0_t () Real)
(declare-fun v_0_0 () Real)
(declare-fun v_0_t () Real)
(declare-fun noise_0_0 () Real [1.000000])
(declare-fun noise_0_t () Real [1.000000])
(declare-fun time_0 () Real)
(declare-fun mode_0 () Real)
(define-ode flow_1 ((= d/dt[noise] 0) (= d/dt[v] (+ -9.8 noise)) (= d/dt[x] (+ (+ v noise) (* 10 x)))))
(assert (<= 0 x_0_0))
(assert (<= x_0_0 20))
(assert (<= 0 x_0_t))
(assert (<= x_0_t 20))
(assert (<= -100 v_0_0))
(assert (<= v_0_0 100))
(assert (<= -100 v_0_t))
(assert (<= v_0_t 100))
(assert (<= -1 noise_0_0))
(assert (<= noise_0_0 0))
(assert (<= -1 noise_0_t))
(assert (<= noise_0_t 0))
(assert (<= 0 time_0 [0.000000]))
(assert (<= time_0 20 [0.000000]))
(assert (<= 1 mode_0))
(assert (<= mode_0 1))
(assert (and (and (= v_0_0 -2) (= x_0_0 18)) (= mode_0 1) (= noise_0_t (+ noise_0_0 (* 0 time_0))) (= [noise_0_t v_0_t x_0_t] (integral 0. time_0 [noise_0_0 v_0_0 x_0_0] flow_1)) (= mode_0 1) (forall_t 1 [0 time_0] (<= v_0_t 0)) (<= v_0_t 0) (<= v_0_0 0) (forall_t 1 [0 time_0] (>= x_0_t 0)) (>= x_0_t 0) (>= x_0_0 0) (= mode_0 1) (< x_0_t 2)))
(check-sat)
(exit)
